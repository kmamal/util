import Fs from 'node:fs'
import Path from 'node:path'
import { Matcher } from '@kmamal/globs/matcher'
import { sort } from '../src/array/sort.js'
import { camelCase } from '../src/string/case/camel.js'

import { fileURLToPath } from 'node:url'
const __dirname = Path.dirname(fileURLToPath(import.meta.url))
const cwd = Path.join(Path.dirname(__dirname), 'src')

const namespaces = [
	{ path: 'array/join.js', namespace: 'array' },
	{ path: 'array/repeat.js', namespace: 'array' },
	{ path: 'array/split.js', namespace: 'array' },
	{ path: 'array/searching/', namespace: 'searching' },
	{ path: 'array/sorting/', namespace: 'sorting' },
	{ path: 'ieee-float/single.js', namespace: 'ieeeFloat.single' },
	{ path: 'ieee-float/double.js', namespace: 'ieeeFloat.double' },
	{ path: 'number/modular.js', namespace: 'modular' },
	{ path: 'object/clone.js', namespace: 'object' },
	{ path: 'object/copy.js', namespace: 'object' },
	{ path: 'object/merge.js', namespace: 'object' },
	{ path: 'object/zip.js', namespace: 'object' },
	{ path: 'set/', namespace: 'sets' },
]

const file = await Fs.promises.open(Path.join(cwd, 'index.js'), 'w')
await file.truncate()
await file.appendFile("// THIS FILE IS AUTOGENERATED\n\n")

const createdObjects = new Set()
for (const { namespace } of namespaces) {
	const parts = namespace.split('.')
	for (let i = 1; i <= parts.length; i++) {
		const path = parts.slice(0, i).join('.')
		if (createdObjects.has(path)) { continue }

		const prefix = i > 1 ? `.${parts.slice(0, i - 1).join('.')}` : ''
		await file.appendFile(`module.exports${prefix}.${parts[i - 1]} = {}\n`)
		createdObjects.add(path)
	}
}
await file.appendFile('\n')

const paths = []
const matcher = new Matcher([
	'**/*.js',
	'!index.js',
	'!/fp.js',
	'!testing/',
	'!*.test.js',
	'!_*/',
	'!/meta/build-index.js',
], { cwd })
for await (const { path } of matcher.getFiles()) {
	paths.push(Path.relative(cwd, path))
}
sort.$$$(paths)

const allSymbols = new Map()
let hasDuplicates = false

for (const path of paths) {
	const objName = camelCase(path.slice(0, -3).replaceAll('/', '-'))
	await file.appendFile(`const ${objName} = require('./${path}')\n`)

	let namespace = ''
	for (const entry of namespaces) {
		if (!path.startsWith(entry.path)) { continue }
		namespace = `${entry.namespace}.`
		entry.isUsed = true
	}

	const { default: exports } = await import(Path.join(cwd, path))
	for (const symbol of Object.keys(exports)) {
		const fullSymbol = `${namespace}${symbol}`
		if (allSymbols.has(fullSymbol)) {
			console.error("duplicate", fullSymbol, path, allSymbols.get(fullSymbol).path)
			hasDuplicates = true
		} else {
			allSymbols.set(fullSymbol, { path })
		}

		await file.appendFile(`module.exports.${fullSymbol} = ${objName}.${symbol}\n`)
	}
	await file.appendFile('\n')
}

await file.close()

let hasUnusedNamespaces = false
for (const entry of namespaces) {
	if (entry.isUsed) { continue }
	console.error("unused", entry)
	hasUnusedNamespaces = true
}

if (hasDuplicates || hasUnusedNamespaces) { process.exit(1) }
