#!/usr/bin/env node

const Fs = require('fs/promises')
const Path = require('path')
const { sort } = require('../src/array/sort')
const { camelCase } = require('../src/string/case/camel')

const pattern = [
	'*/**/*.js',
	'!**/_*/*',
	'!**/_*.js',
	'!**/testing',
	'!**/*.test.js',
	'!**/index.js',
	'!meta/build-index.js',
]

const cwd = Path.join(Path.dirname(__dirname), 'src')

const namespaces = [
	{ path: 'array/2d/', namespace: 'array2d' },
	{ path: 'array/join.js', namespace: 'array' },
	{ path: 'array/repeat.js', namespace: 'array' },
	{ path: 'array/split.js', namespace: 'array' },
	{ path: 'array/searching/', namespace: 'searching' },
	{ path: 'array/sorting/', namespace: 'sorting' },
	{ path: 'array/heap/', namespace: 'heap' },
	{ path: 'array/tree/binary.js', namespace: 'tree.binary' },
	{ path: 'array/tree/quaternary.js', namespace: 'tree.quaternary' },
	{ path: 'array/tree/octonary.js', namespace: 'tree.octonary' },
	{ path: 'ieee-float/single.js', namespace: 'ieeeFloat.single' },
	{ path: 'ieee-float/double.js', namespace: 'ieeeFloat.double' },
	{ path: 'number/modular.js', namespace: 'modular' },
	{ path: 'object/clone.js', namespace: 'object' },
	{ path: 'object/merge.js', namespace: 'object' },
	{ path: 'object/zip.js', namespace: 'object' },
	{ path: 'set/', namespace: 'sets' },
]

import('globby').then(async ({ globbySync }) => {
	const file = await Fs.open(Path.join(cwd, 'index.js'), 'w')
	await file.truncate()
	await file.appendFile("// THIS FILE IS AUTOGENERATED\n\n")

	const createdObjects = new Set()
	for (const { namespace } of namespaces) {
		const parts = namespace.split('.')
		for (let i = 1; i <= parts.length; i++) {
			const path = parts.slice(0, i).join('.')
			if (createdObjects.has(path)) { continue }

			const prefix = i > 1 ? `.${parts.slice(0, i - 1).join('.')}` : ''
			await file.appendFile(`module.exports${prefix}.${parts[i - 1]} = {}\n`)
			createdObjects.add(path)
		}
	}
	await file.appendFile('\n')

	const paths = globbySync(pattern, { cwd })
	sort.$$$(paths)

	const allSymbols = new Map()
	let hasDuplicates = false

	for (const path of paths) {
		const objName = camelCase(path.slice(0, -3).replaceAll('/', '-'))
		await file.appendFile(`const ${objName} = require('./${path}')\n`)

		let namespace = ''
		for (const entry of namespaces) {
			if (!path.startsWith(entry.path)) { continue }
			namespace = `${entry.namespace}.`
			entry.isUsed = true
		}

		const module = require(Path.join(cwd, path))
		const exports = Object.keys(module)
		for (const symbol of exports) {
			const fullSymbol = `${namespace}${symbol}`
			if (allSymbols.has(fullSymbol)) {
				console.error("duplicate", fullSymbol, path, allSymbols.get(fullSymbol).path)
				hasDuplicates = true
			} else {
				allSymbols.set(fullSymbol, { path })
			}

			await file.appendFile(`module.exports.${fullSymbol} = ${objName}.${symbol}\n`)
		}
		await file.appendFile('\n')
	}

	await file.close()

	let hasUnusedNamespaces = false
	for (const entry of namespaces) {
		if (entry.isUsed) { continue }
		console.error("unused", entry)
		hasUnusedNamespaces = true
	}

	if (hasDuplicates || hasUnusedNamespaces) { process.exit(1) }
})
