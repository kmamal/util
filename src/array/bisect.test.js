const { test } = require('@xyz/testing')
const { bisect, bisectLeft, bisectRight } = require('.')

test('arra.bisect', (t) => {
	t.equal(bisect([], 0), 0)
	t.equal(bisect([ 1 ], 0), 0)
	t.equal(bisect([ 1 ], 1), 0)
	t.equal(bisect([ 1 ], 2), 1)
	t.equal(bisect([ 1, 2, 3 ], 0), 0)
	t.equal(bisect([ 1, 2, 3 ], 1), 0)
	t.equal(bisect([ 1, 2, 3 ], 2), 1)
	t.equal(bisect([ 1, 2, 3 ], 3), 2)
	t.equal(bisect([ 1, 2, 3 ], 4), 3)
})

test('arra.bisectLeft', (t) => {
	t.equal(bisectLeft([], 0), 0)
	t.equal(bisectLeft([ 1 ], 0), 0)
	t.equal(bisectLeft([ 1 ], 1), 0)
	t.equal(bisectLeft([ 1 ], 2), 1)
	t.equal(bisectLeft([ 1, 2, 3 ], 0), 0)
	t.equal(bisectLeft([ 1, 2, 3 ], 1), 0)
	t.equal(bisectLeft([ 1, 2, 3 ], 2), 1)
	t.equal(bisectLeft([ 1, 2, 3 ], 3), 2)
	t.equal(bisectLeft([ 1, 2, 3 ], 4), 3)
	t.equal(bisectLeft([ 2, 2, 2 ], 2), 0)
})

test('arra.bisectRight', (t) => {
	t.equal(bisectRight([], 0), 0)
	t.equal(bisectRight([ 1 ], 0), 0)
	t.equal(bisectRight([ 1 ], 1), 1)
	t.equal(bisectRight([ 1 ], 2), 1)
	t.equal(bisectRight([ 1, 2, 3 ], 0), 0)
	t.equal(bisectRight([ 1, 2, 3 ], 1), 1)
	t.equal(bisectRight([ 1, 2, 3 ], 2), 2)
	t.equal(bisectRight([ 1, 2, 3 ], 3), 3)
	t.equal(bisectRight([ 1, 2, 3 ], 4), 3)
	t.equal(bisectRight([ 2, 2, 2 ], 2), 3)
})
